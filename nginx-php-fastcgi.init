#!/bin/sh
#
# nginx-php-fastcgi - this script starts and stops a php process used
# to spawn/proxy fastcgi
#
# chkconfig:   - 85 15
# description:  Nginx-php-fastcgi uses php to spawn fastcgi processes for
#		Nginx.
# processname: nginx-php-fastcgi
# config:      /etc/nginx/nginx-php-fastcgi.conf

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

get_config() {
	# Source configuration parameters
	CONFIG="/etc/nginx/nginx-php-fastcgi.conf"
	[ -f "${CONFIG}" ] || exit 6

	LOCKFILE=/var/lock/subsys/nginx-php-fastcgi.lock
	SOCKDIR=/var/run/nginx-php-fastcgi

	SOCKNAME=$(awk -F"=" '/^SOCKNAME/ {print $2}' ${CONFIG})
	USER=$(awk -F"=" '/^USER/ {print $2}' ${CONFIG})
	GROUP=$(awk -F"=" '/^GROUP/ {print $2}' ${CONFIG})
	PHP_CGI=$(awk -F"=" '/^PHP_CGI/ {print $2}' ${CONFIG})
	PHP_FCGI_CHILDREN=$(awk -F"=" '/^PHP_FCGI_CHILDREN/ {print $2}' ${CONFIG})
	PHP_FCGI_MAX_REQUESTS=$(awk -F"=" '/^PHP_FCGI_MAX_REQUESTS/ {print $2}' ${CONFIG})

	: ${SOCKNAME:-nginx-php-fastcgi.socket}
	: ${USER:-nginx}
	: ${GROUP:-nginx}
	: ${PHP_CGI:-/usr/bin/php-cgi}
	: ${PHP_FCGI_CHILDREN:-15}
	: ${PHP_FCGI_MAX_REQUESTS:-1000}

	BIND=${SOCKDIR}/${SOCKNAME}
	PHP_CGI_NAME=$(/bin/basename ${PHP_CGI})
	PHP_CGI_ARGS="USER=${USER} GROUP=${GROUP} PATH=/usr/bin PHP_FCGI_CHILDREN=${PHP_FCGI_CHILDREN} PHP_FCGI_MAX_REQUESTS=${PHP_FCGI_MAX_REQUESTS} ${PHP_CGI} -b ${BIND}"
}

start() {
	local RETVAL=""
	[ -x ${PHP_CGI} ] || exit 5
	get_config
	echo -n "Starting PHP FastCGI: "
	/usr/bin/install -p -d -o ${USER} -g ${GROUP} -m 770 "${SOCKDIR}"
	daemon --user=${USER} "/usr/bin/env -- ${PHP_CGI_ARGS} &"
	RETVAL=$?
	echo
	[ ${RETVAL} -eq 0 ] && touch ${LOCKFILE}
	sleep 2
	[[ ${RETVAL} -eq 0 && -S ${BIND} ]] && chmod 660 ${BIND}
	return ${RETVAL}
}

stop() {
	local RETVAL=""
	get_config
	echo -n "Stopping PHP FastCGI: "
	killall -q -w -u ${USER} ${PHP_CGI}
	RETVAL=$?
	echo
	[ ${RETVAL} -eq 0 ] && rm -f ${LOCKFILE}
	[[ ${RETVAL} -eq 0 && -S ${BIND} ]] && rm -f ${BIND}
	return ${RETVAL}
}

restart() {
	get_config
	stop
	start
	return $?
}

status() {
	local PIDS=""
	get_config
	PIDS="$(ps -u ${USER} | awk "/${PHP_CGI_NAME}/ {printf \"%s,\", \$1}")"
	[[ -z "${PIDS}" && -f ${LOCKFILE} ]] && echo "PHP FastCGI is not running but ${LOCKFILE} exists" && return 2
	[[ -n "${PIDS}" && ! -f ${LOCKFILE} ]] && echo "PHP FastCGI is running with pids ${PIDS} but ${LOCKFILE} is missing" && return 4
	[[ -n "${PIDS}" && -f ${LOCKFILE} ]] && echo "PHP FastCGI is running with pids ${PIDS}" && return 0

	# all other cases means service is not running
	return 3
}

case "$1" in
status)		status
		exit $?
		;;
start)		start
		exit $?
		;;
stop)		stop
		exit $?
		;;
restart)	restart
		exit $?
		;;
*)		echo "Usage: php-fastcgi {status|start|stop|restart}"
		exit 1
esac

exit
